# Generated by sila2.code_generator; sila2.__version__: 0.12.2
from __future__ import annotations

from abc import ABC, abstractmethod
from datetime import timedelta
from queue import Queue
from typing import TYPE_CHECKING, Optional, Union

from sila2.server import (
    FeatureImplementationBase,
    MetadataDict,
    ObservableCommandInstance,
    ObservableCommandInstanceWithIntermediateResponses,
)

from .hiperistaltic_types import (
    ResumePump_IntermediateResponses,
    ResumePump_Responses,
    SetPumpCalibration_Responses,
    StartPump_IntermediateResponses,
    StartPump_Responses,
    StartPumpCalibration_IntermediateResponses,
    StartPumpCalibration_Responses,
    StartPumpContinuous_IntermediateResponses,
    StartPumpContinuous_Responses,
    StopPump_Responses,
)

if TYPE_CHECKING:

    from ...server import Server


class HiPeristalticBase(FeatureImplementationBase, ABC):
    parent_server: Server

    _PumpConnected_producer_queue: Queue[Union[bool, Exception]]
    _PumpConnected_current_value: bool

    StartPump_default_lifetime_of_execution: Optional[timedelta]

    StartPumpContinuous_default_lifetime_of_execution: Optional[timedelta]

    StopPump_default_lifetime_of_execution: Optional[timedelta]

    ResumePump_default_lifetime_of_execution: Optional[timedelta]

    StartPumpCalibration_default_lifetime_of_execution: Optional[timedelta]

    def __init__(self, parent_server: Server):
        """

        Peristaltic pump controller for high precision liquid handling by HI-ERN.

        """
        super().__init__(parent_server=parent_server)

        self._PumpConnected_producer_queue = Queue()

        self.StartPump_default_lifetime_of_execution = None
        self.StartPumpContinuous_default_lifetime_of_execution = None
        self.StopPump_default_lifetime_of_execution = None
        self.ResumePump_default_lifetime_of_execution = None
        self.StartPumpCalibration_default_lifetime_of_execution = None

    def update_PumpConnected(self, PumpConnected: bool, queue: Optional[Queue[bool]] = None) -> None:
        """
        Pump is connected.

        This method updates the observable property 'PumpConnected'.

        :param queue: The queue to send updates to. If None, the default Queue will be used.
        """
        if queue is None:
            queue = self._PumpConnected_producer_queue
            self._PumpConnected_current_value = PumpConnected
        queue.put(PumpConnected)

    def PumpConnected_on_subscription(self, *, metadata: MetadataDict) -> Optional[Queue[bool]]:
        """
        Pump is connected.

        This method is called when a client subscribes to the observable property 'PumpConnected'

        :param metadata: The SiLA Client Metadata attached to the call
        :return: Optional `Queue` that should be used for updating this property.
            If None, the default Queue will be used.
        """

    def abort_PumpConnected_subscriptions(self, error: Exception, queue: Optional[Queue[bool]] = None) -> None:
        """
        Pump is connected.

        This method aborts subscriptions to the observable property 'PumpConnected'.

        :param error: The Exception to be sent to the subscribing client.
            If it is no DefinedExecutionError or UndefinedExecutionError, it will be wrapped in an UndefinedExecutionError.
        :param queue: The queue to abort. If None, the default Queue will be used.
        """
        if queue is None:
            queue = self._PumpConnected_producer_queue
        queue.put(error)

    @property
    def current_PumpConnected(self) -> bool:
        try:
            return self._PumpConnected_current_value
        except AttributeError:
            raise AttributeError("Observable property PumpConnected has never been set")

    @abstractmethod
    def SetPumpCalibration(
        self, PumpIndex: int, CalibrationParameter: float, *, metadata: MetadataDict
    ) -> SetPumpCalibration_Responses:
        """

        Set a pump channel's calibration parameter in microliters per revolution.



          :param PumpIndex:
          The target pump channel index from 1 to 4 (both inclusive).


          :param CalibrationParameter:
          Calibration parameter in microliters per revolution.


          :param metadata: The SiLA Client Metadata attached to the call

          :return:

              - Completed: Whether the new calibration parameter is applied successfully.


        """

    @abstractmethod
    def StartPump(
        self,
        PumpIndex: int,
        FlowRate: float,
        TargetVolume: float,
        PumpDirection: str,
        *,
        metadata: MetadataDict,
        instance: ObservableCommandInstanceWithIntermediateResponses[StartPump_IntermediateResponses],
    ) -> StartPump_Responses:
        """

        Starts the pump channel with the given flow rate and runs until the target volume is reached.



          :param PumpIndex:
          The target pump channel index from 1 to 4 (both inclusive).


          :param FlowRate:
          The flow rate in microliters per second at which the pump should operate.


          :param TargetVolume:
          The target volume in microliters.


          :param PumpDirection:
          Pump direction, either 'clockwise' (or CW) or 'counter-clockwise' (or CCW). If empty, default direction defined in the configuration file will be used.


          :param metadata: The SiLA Client Metadata attached to the call
          :param instance: The command instance, enabling sending status updates to subscribed clients

          :return:

              - PumpedVolume: Total pumped volume in microliters until the pump was finished or stopped.


        """

    @abstractmethod
    def StartPumpContinuous(
        self,
        PumpIndex: int,
        FlowRate: float,
        PumpDirection: str,
        *,
        metadata: MetadataDict,
        instance: ObservableCommandInstanceWithIntermediateResponses[StartPumpContinuous_IntermediateResponses],
    ) -> StartPumpContinuous_Responses:
        """

        Starts the pump channel with the given flow rate and runs continuously until stopped.



          :param PumpIndex:
          The target pump channel index from 1 to 4 (both inclusive).


          :param FlowRate:
          The flow rate in microliters per second at which the pump should operate.


          :param PumpDirection:
          Pump direction, either 'clockwise' or 'counter-clockwise'. If empty, default direction defined in the configuration file will be used.


          :param metadata: The SiLA Client Metadata attached to the call
          :param instance: The command instance, enabling sending status updates to subscribed clients

          :return:

              - PumpedVolume: Total pumped volume in microliters until the pump was stopped.


        """

    @abstractmethod
    def StopPump(
        self, PumpIndex: int, *, metadata: MetadataDict, instance: ObservableCommandInstance
    ) -> StopPump_Responses:
        """

        Stops the given pump channel.



          :param PumpIndex:
          The target pump channel index from 1 to 4 (both inclusive).


          :param metadata: The SiLA Client Metadata attached to the call
          :param instance: The command instance, enabling sending status updates to subscribed clients

          :return:

              - RemainingVolume: The remaining volume in microliters to be pumped at the time of stopping.


        """

    @abstractmethod
    def ResumePump(
        self,
        PumpIndex: int,
        *,
        metadata: MetadataDict,
        instance: ObservableCommandInstanceWithIntermediateResponses[ResumePump_IntermediateResponses],
    ) -> ResumePump_Responses:
        """

        Resumes the paused pump.



          :param PumpIndex:
          The target pump channel index from 1 to 4 (both inclusive).


          :param metadata: The SiLA Client Metadata attached to the call
          :param instance: The command instance, enabling sending status updates to subscribed clients

          :return:

              - PumpedVolume: Total pumped volume in microliters until the pump was finished or stopped.


        """

    @abstractmethod
    def StartPumpCalibration(
        self,
        PumpIndex: int,
        RPM: float,
        TargetRevolutions: float,
        PumpDirection: str,
        *,
        metadata: MetadataDict,
        instance: ObservableCommandInstanceWithIntermediateResponses[StartPumpCalibration_IntermediateResponses],
    ) -> StartPumpCalibration_Responses:
        """

        Starts the pump channel with the given RPM until target number of revolution of the motor is achieved.



          :param PumpIndex:
          The target pump channel index from 1 to 4 (both inclusive).


          :param RPM:
          Revolution per minute.


          :param TargetRevolutions:
          The target number of revolutions of the motor.


          :param PumpDirection:
          Pump direction, either 'clockwise' or 'counter-clockwise'. If empty, default direction defined in the configuration file will be used.


          :param metadata: The SiLA Client Metadata attached to the call
          :param instance: The command instance, enabling sending status updates to subscribed clients

          :return:

              - Completed: Whether the target number of revolution is achieved successfully.


        """
