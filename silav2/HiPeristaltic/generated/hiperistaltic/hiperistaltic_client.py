# Generated by sila2.code_generator; sila2.__version__: 0.12.2
# -----
# This class does not do anything useful at runtime. Its only purpose is to provide type annotations.
# Since sphinx does not support .pyi files (yet?), this is a .py file.
# -----

from __future__ import annotations

from typing import TYPE_CHECKING

if TYPE_CHECKING:

    from typing import Iterable, Optional

    from hiperistaltic_types import (
        ResumePump_IntermediateResponses,
        ResumePump_Responses,
        SetPumpCalibration_Responses,
        StartPump_IntermediateResponses,
        StartPump_Responses,
        StartPumpCalibration_IntermediateResponses,
        StartPumpCalibration_Responses,
        StartPumpContinuous_IntermediateResponses,
        StartPumpContinuous_Responses,
        StopPump_Responses,
    )
    from sila2.client import (
        ClientMetadataInstance,
        ClientObservableCommandInstance,
        ClientObservableCommandInstanceWithIntermediateResponses,
        ClientObservableProperty,
    )


class HiPeristalticClient:
    """

    Peristaltic pump controller for high precision liquid handling by HI-ERN.

    """

    PumpConnected: ClientObservableProperty[bool]
    """
    Pump is connected.
    """

    def SetPumpCalibration(
        self,
        PumpIndex: int,
        CalibrationParameter: float,
        *,
        metadata: Optional[Iterable[ClientMetadataInstance]] = None,
    ) -> SetPumpCalibration_Responses:
        """

        Set a pump channel's calibration parameter in microliters per revolution.

        """
        ...

    def StartPump(
        self,
        PumpIndex: int,
        FlowRate: float,
        TargetVolume: float,
        PumpDirection: str,
        *,
        metadata: Optional[Iterable[ClientMetadataInstance]] = None,
    ) -> ClientObservableCommandInstanceWithIntermediateResponses[StartPump_IntermediateResponses, StartPump_Responses]:
        """

        Starts the pump channel with the given flow rate and runs until the target volume is reached.

        """
        ...

    def StartPumpContinuous(
        self,
        PumpIndex: int,
        FlowRate: float,
        PumpDirection: str,
        *,
        metadata: Optional[Iterable[ClientMetadataInstance]] = None,
    ) -> ClientObservableCommandInstanceWithIntermediateResponses[
        StartPumpContinuous_IntermediateResponses, StartPumpContinuous_Responses
    ]:
        """

        Starts the pump channel with the given flow rate and runs continuously until stopped.

        """
        ...

    def StopPump(
        self, PumpIndex: int, *, metadata: Optional[Iterable[ClientMetadataInstance]] = None
    ) -> ClientObservableCommandInstance[StopPump_Responses]:
        """

        Stops the given pump channel.

        """
        ...

    def ResumePump(
        self, PumpIndex: int, *, metadata: Optional[Iterable[ClientMetadataInstance]] = None
    ) -> ClientObservableCommandInstanceWithIntermediateResponses[
        ResumePump_IntermediateResponses, ResumePump_Responses
    ]:
        """

        Resumes the paused pump.

        """
        ...

    def StartPumpCalibration(
        self,
        PumpIndex: int,
        RPM: float,
        TargetRevolutions: float,
        PumpDirection: str,
        *,
        metadata: Optional[Iterable[ClientMetadataInstance]] = None,
    ) -> ClientObservableCommandInstanceWithIntermediateResponses[
        StartPumpCalibration_IntermediateResponses, StartPumpCalibration_Responses
    ]:
        """

        Starts the pump channel with the given RPM until target number of revolution of the motor is achieved.

        """
        ...
